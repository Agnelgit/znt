/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ZynqtraEvents {
  export type EventRegistrationStruct = {
    eventId: BigNumberish;
    participant: AddressLike;
    timestamp: BigNumberish;
    attended: boolean;
    pointsEarned: BigNumberish;
  };

  export type EventRegistrationStructOutput = [
    eventId: bigint,
    participant: string,
    timestamp: bigint,
    attended: boolean,
    pointsEarned: bigint
  ] & {
    eventId: bigint;
    participant: string;
    timestamp: bigint;
    attended: boolean;
    pointsEarned: bigint;
  };
}

export interface ZynqtraEventsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createEvent"
      | "eventExists"
      | "eventParticipants"
      | "getEventParticipants"
      | "getRegistration"
      | "getUserEvents"
      | "markAttendance"
      | "owner"
      | "registerForEvent"
      | "registrations"
      | "renounceOwnership"
      | "transferOwnership"
      | "userEvents"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AttendanceMarked"
      | "EventRegistered"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eventExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eventParticipants",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventParticipants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistration",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEvents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markAttendance",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerForEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registrations",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userEvents",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markAttendance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerForEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userEvents", data: BytesLike): Result;
}

export namespace AttendanceMarkedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    participant: AddressLike,
    points: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    participant: string,
    points: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    participant: string;
    points: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventRegisteredEvent {
  export type InputTuple = [eventId: BigNumberish, participant: AddressLike];
  export type OutputTuple = [eventId: bigint, participant: string];
  export interface OutputObject {
    eventId: bigint;
    participant: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZynqtraEvents extends BaseContract {
  connect(runner?: ContractRunner | null): ZynqtraEvents;
  waitForDeployment(): Promise<this>;

  interface: ZynqtraEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createEvent: TypedContractMethod<
    [_eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  eventExists: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  eventParticipants: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEventParticipants: TypedContractMethod<
    [_eventId: BigNumberish],
    [string[]],
    "view"
  >;

  getRegistration: TypedContractMethod<
    [_eventId: BigNumberish, _participant: AddressLike],
    [ZynqtraEvents.EventRegistrationStructOutput],
    "view"
  >;

  getUserEvents: TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;

  markAttendance: TypedContractMethod<
    [_eventId: BigNumberish, _participant: AddressLike, _points: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerForEvent: TypedContractMethod<
    [_eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  registrations: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, string, bigint, boolean, bigint] & {
        eventId: bigint;
        participant: string;
        timestamp: bigint;
        attended: boolean;
        pointsEarned: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userEvents: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createEvent"
  ): TypedContractMethod<[_eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eventExists"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "eventParticipants"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEventParticipants"
  ): TypedContractMethod<[_eventId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRegistration"
  ): TypedContractMethod<
    [_eventId: BigNumberish, _participant: AddressLike],
    [ZynqtraEvents.EventRegistrationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserEvents"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "markAttendance"
  ): TypedContractMethod<
    [_eventId: BigNumberish, _participant: AddressLike, _points: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerForEvent"
  ): TypedContractMethod<[_eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registrations"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, string, bigint, boolean, bigint] & {
        eventId: bigint;
        participant: string;
        timestamp: bigint;
        attended: boolean;
        pointsEarned: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userEvents"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "AttendanceMarked"
  ): TypedContractEvent<
    AttendanceMarkedEvent.InputTuple,
    AttendanceMarkedEvent.OutputTuple,
    AttendanceMarkedEvent.OutputObject
  >;
  getEvent(
    key: "EventRegistered"
  ): TypedContractEvent<
    EventRegisteredEvent.InputTuple,
    EventRegisteredEvent.OutputTuple,
    EventRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AttendanceMarked(uint256,address,uint256)": TypedContractEvent<
      AttendanceMarkedEvent.InputTuple,
      AttendanceMarkedEvent.OutputTuple,
      AttendanceMarkedEvent.OutputObject
    >;
    AttendanceMarked: TypedContractEvent<
      AttendanceMarkedEvent.InputTuple,
      AttendanceMarkedEvent.OutputTuple,
      AttendanceMarkedEvent.OutputObject
    >;

    "EventRegistered(uint256,address)": TypedContractEvent<
      EventRegisteredEvent.InputTuple,
      EventRegisteredEvent.OutputTuple,
      EventRegisteredEvent.OutputObject
    >;
    EventRegistered: TypedContractEvent<
      EventRegisteredEvent.InputTuple,
      EventRegisteredEvent.OutputTuple,
      EventRegisteredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
